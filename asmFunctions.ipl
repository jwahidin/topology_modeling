// asmFunctions
// This policy contains collection of functions to interact with ASM.
// The policy was originally written by Rene Klever @IBM (version 1.3)
// Extended by Julius F. Wahidin
//   version 1.0 - Aug 2019.

// function to encode username and password 
function getBase64Value(username,password,resultValue) {
   obj     = NewJavaObject("java.lang.String",{}); 
   objFull = JavaCall(null,obj,"valueOf",{username +":"+ password}); 
   value   = JavaCall(null,objFull ,"getBytes",{});
   result  = JavaCall("com.sun.xml.messaging.saaj.util.Base64",null,"encode",{value});
   resultValue = NewJavaObject("java.lang.String",{result});
   //Log("base64Encoding is: " + resultValue );
}

// function to set the REST API https headers
function asm_initalize(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties){
   asm_protocol = 'https'; 
   asm_host = 'jw-noi-asm.csplab.local';
   asm_port = 443;
   asm_path = '/1.0/rest-observer'; 
   asm_proxyuser = 'asm';
   asm_proxypass = 'asm';
   getBase64Value(asm_proxyuser, asm_proxypass, asm_codedpass); 

   HeadersToSend=NewObject(); 
   HeadersToSend['Content-Type']='application/json';
   HeadersToSend['Accept']='application/json'; 
   HeadersToSend['X-TenantID']='cfd95b7e-3bc7-4006-a4a8-a73a79c71255';
   HeadersToSend['Authorization']="Basic "+ asm_codedpass;
 
   HttpProperties=NewObject();
   HttpProperties.ContentType="application/json"; 
   
   // In case of having a network proxy inbetween:
   //HttpProperties.UseProxy = false;
   //HttpProperties.ProxyHost = "proxy.domain";
   //HttpProperties.ProxyPort = 8080;
 } 

// Start the job. Vefiry if the asm listen job is still running if not it starts it.
function asm_startBulkJob(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_JobId,hasError){
  asm_JobId='ImpactBulkJob';
  new_path = asm_path + "/jobs/" + asm_JobId;
  ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Get", "", null, null, HeadersToSend, HttpProperties);
  Log(2,"JSON Result: " + ResultJson);
  Log(2,"Result Code: " + ResultCode);  
  hasError="no";
      
  if (ResultCode != '200'){ // Job is not running.
    // Load the Job - Use Bulk Replace.
    new_path = asm_path + "/jobs/bulk_replace";
    // Provider can be anything, the important one is the UniqueId which is the JobId
    //JSONContent='{"unique_id":"' + asm_JobId + '","type": "listen","parameters": {"provider": "NOI_ImpactListenJob"}}'; 
    JSONContent='{"unique_id":"' + asm_JobId + '","parameters": {"provider": "NOI_ImpactBulkReplaceJob"}}'; 
    HttpProperties.Content = JSONContent;
    
    ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Post", "", null, null, HeadersToSend, HttpProperties);
    Log(2,"JSON Result: " + ResultJson);
    Log(2,"Result Code: " + ResultCode);  
    if (ResultCode != '201'){ // If not 201 then we failed.
      Log("ASM ImpactBulkJob can not be started.");
      hasError="yes";
    } else {  // Result code is 201, ie. successful.
      Log(2,"ASM ImpactBulkJob is started successfully");  

      // Hibernate to wait for ASM to be ready.  Note Hibernation Activation is every 5 seconds.
      // Since we use Hibernate we can not use @ Variables in this policy.
      ActionKey="createTopoBulkParam";
      Hibernate(ActionKey, null, 5);
      RemoveHibernation(ActionKey);
    }
  } else {
    Log(2,"ASM ImpactBulkJob is currently already running."); 
 }
} 

// If we use the bulk job, we need to synchronize.
// the Job : jobs/$encoded_unique_id/synchronize
function asm_syncBulkJob(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_JobId){
  new_path = asm_path + "/jobs/"+ asm_JobId + "/synchronize";
  nHttpProperties=NewObject();
  nHttpProperties.ContentType="application/json"; 
  ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Post", "", null, null, HeadersToSend, nHttpProperties);
  Log(2,"JSON Result: " + ResultJson);
  Log(2,"Result Code: " + ResultCode);  

  if (ResultCode != '200'){ // If not 200 then we failed.
    Log("ASM Bulk Synchronized can not be completed.");
  } else {  // Result code is 200, ie. successful.
    Log(2,"ASM Bulk Synchronized is completed successfully");    
  }
}

// function to create an entity
function asm_createResource(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_name,asm_uniqueId,asm_matchTokens,asm_mergeTokens,asm_entityTypes,asm_JobId) {
   new_path = asm_path + "/rest/resources";
   JSONContent='{"name": "' + asm_name + '","uniqueId": "' + asm_uniqueId + '","matchTokens": ["' + asm_matchTokens + '"],"mergeTokens": ["' + asm_mergeTokens + '"],"entityTypes": ["' + asm_entityTypes + '"]}';
   log(JSONContent);
   HttpProperties.Content = JSONContent;
   HeadersToSend['JobId']=asm_JobId;
   ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Post", "", null, null, HeadersToSend, HttpProperties);
   Log(2,"JSON Result: " + ResultJson);
   Log(2,"Result Code: " + ResultCode);  
}

// function to delete a resource by its UniqueId
function asm_deleteResource(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_UniqueId,asm_JobId) {
   new_path = asm_path + "/rest/resources/" + asm_UniqueId;
   log(new_path);
   HeadersToSend['JobId']=asm_JobId;
   ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Delete", "", null, null, HeadersToSend, HttpProperties);
   Log(2,"JSON Result: " + ResultJson);
   Log(2,"Result Code: " + ResultCode);   
}

// function to create a edgetype
function asm_createEdgeType(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_edgeType,asm_edgeLabel,description,asm_JobId) {
   //edgeLabel value must be one of [aggregation, association, dataFlow, dependency]
   new_path = "/1.0/topology/types/edge";
   JSONContent='{"edgeType": "' + asm_edgeType + '","edgeLabel": "' + asm_edgeLabel + '","description": "' + description + '"}';
   log(JSONContent);
   HttpProperties.Content = JSONContent;
   HeadersToSend['JobId']=asm_JobId;
   ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Post", "", null, null, HeadersToSend, HttpProperties);
   Log(2,"JSON Result: " + ResultJson);
   Log(2,"Result Code: " + ResultCode);    
}

// function to create a relation (edge)
function asm_createEdge(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_fromUniqueId,asm_edgeType,asm_toUniqueId,asm_JobId) {
   new_path = asm_path + "/rest/references";
   JSONContent='{"_fromUniqueId": "' + asm_fromUniqueId + '","_edgeType": "' + asm_edgeType + '","_toUniqueId": "' + asm_toUniqueId + '"}';
   log(JSONContent);
   HttpProperties.Content = JSONContent;
   HeadersToSend['JobId']=asm_JobId;
   ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Post", "", null, null, HeadersToSend, HttpProperties);
   Log(2,"JSON Result: " + ResultJson);
   Log(2,"Result Code: " + ResultCode);  
}

// function to delete a named relation in both direction.
function asm_deleteEdgeBothDirection(asm_protocol,asm_host,asm_port,asm_path,HeadersToSend,HttpProperties,asm_UniqueId,asm_edgeType,asm_JobId) {
   new_path = asm_path + "/rest/resources/" + asm_UniqueId + "/references/both/" + asm_edgeType;
   log(new_path);
   HeadersToSend['JobId']=asm_JobId;
   ResultJson=GetHTTP(asm_host, asm_port, asm_protocol, new_path, "", "Delete", "", null, null, HeadersToSend, HttpProperties);
   Log(2,"JSON Result: " + ResultJson);
   Log(2,"Result Code: " + ResultCode);  
}
